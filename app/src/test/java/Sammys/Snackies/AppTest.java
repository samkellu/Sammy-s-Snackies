/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Sammys.Snackies;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

class AppTest {
    @Test void appHasAGreeting() {
        // App classUnderTest = new App();
        assertNotNull(1,"nice");
    }

    @Test void checkCardVerificationValid() {
        assertTrue(App.verifyCard(1010101010101010L, "12/22", 333));
    }

    @Test void checkCardVerificationLarge() {
        assertTrue(App.verifyCard(9999999999999999L, "12/22", 333));
    }

    @Test void checkCardVerificationInvalidCardUnder() {
        assertFalse(App.verifyCard(999999999999999L, "12/22", 333));
    }

    @Test void checkCardVerificationInvalidCardOver() {
        assertFalse(App.verifyCard(99999999999999999L, "12/22", 333));
    }

    @Test void checkCardVerificationInvalidCVCUnder() {
        assertFalse(App.verifyCard(1010101010101010L, "12/22", 33));
    }

    @Test void checkCardVerificationInvalidCVCOver() {
        assertFalse(App.verifyCard(1010101010101010L, "12/22", 33123));
    }

    @Test void checkCardVerificationInvalidCVC4() {
        assertTrue(App.verifyCard(1010101010101010L, "12/22", 3312));
    }

    @Test void checkCardVerificationInvalidDateUnder() {
        assertFalse(App.verifyCard(1010101010101010L, "12/21", 332));
    }

    @Test void checkCardVerificationInvalidDateBadMonthUnder() {
        assertFalse(App.verifyCard(1010101010101010L, "-2/21", 332));
    }

    @Test void checkCardVerificationInvalidDateBadMonthOver() {
        assertFalse(App.verifyCard(1010101010101010L, "13/21", 332));
    }

    @Test void checkCardVerificationInvalidDateBadYearUnder() {
        assertFalse(App.verifyCard(1010101010101010L, "11/-1", 332));
    }

    @Test void checkCardVerificationInvalidDateBadYearOverLen() {
        assertFalse(App.verifyCard(1010101010101010L, "11/100", 332));
    }

    @Test void checkCardVerificationInvalidDateBadMonthOverLen() {
        assertFalse(App.verifyCard(1010101010101010L, "111/50", 332));
    }

    @Test void checkCardVerificationValidDateMonthLen1() {
        assertTrue(App.verifyCard(1010101010101010L, "1/50", 332));
    }

    @Test void checkBuyCashTest(){
        VendingMachine vm = new VendingMachine();
        vm.readFromFile("saveFile.json");

        String[] inputString1 = {"buy", "cash", "water", "1", "1*$20"};
        ArrayList<String> input1 = new ArrayList<>(Arrays.asList(inputString1));
        assertTrue(App.buyer(input1, vm, new Scanner(System.in)));

        String[] inputString2 = {"buy", "cash", "water", "1", "1*$2031"};
        ArrayList<String> input2 = new ArrayList<>(Arrays.asList(inputString2));
        assertFalse(App.buyer(input2, vm, new Scanner(System.in)));

        String[] inputString3 = {"buy", "cash", "water", "5", "1*20"};
        ArrayList<String> input3 = new ArrayList<>(Arrays.asList(inputString3));
        assertFalse(App.buyer(input3, vm, new Scanner(System.in)), "Should be insufficient waters remaining");


        String[] inputString4 = {"buy", "cash", "water", "5"};
        ArrayList<String> input4 = new ArrayList<>(Arrays.asList(inputString4));
        assertFalse(App.buyer(input4, vm, new Scanner(System.in)), "Not enough inputs");


        String[] inputString5 = {"buy", "cash", "water", "-5", "1*$2"};
        ArrayList<String> input5= new ArrayList<>(Arrays.asList(inputString5));
        assertFalse(App.buyer(input5, vm, new Scanner(System.in)), "Negative product count");

    }

    @Test void checkWriteUser(){

        App.loadLogins("testUserLoginWrite.json");

        String[] inputString = {"signup", "test", "password"};
        ArrayList<String> input = new ArrayList<>(Arrays.asList(inputString));
        assertTrue(App.signupUser(input), "could not sign up test user");

        assertFalse(App.signupUser(input), "Should not be able to sign up a duplicate");

        String[] removeString = {"removeUser", "test"};
        ArrayList<String> remove = new ArrayList<>(Arrays.asList(removeString));
        App.removeUser(remove);

    }


    // Check cash/product stock
    @Test void buyerValid() {}

    @Test void buyerInvalidProduct() {}

    @Test void buyerInvalidAmount() {}

    @Test void buyerInvalidCashDenom() {}

    @Test void buyerInvalidCashDenomAmount() {}

    @Test void restockProductValid() {}

    @Test void restockProductInvalidProduct() {}

    @Test void restockProductInvalidAmount() {}

    @Test void addProductValid() {}

    @Test void addProductInvalidName() {}

    @Test void addProductInvalidPrice() {}

    @Test void addProductInvalidAmount() {}

    @Test void removeProductValid() {}

    @Test void removeProductInvalidProduct() {}

    @Test void addUserValid() {}

    @Test void addUserInvalidUserExists() {}

    @Test void addUserInvalidUserName() {}

    @Test void signUpValid() {}

    @Test void signUpInvalidUserExists() {}

    @Test void signUpInvalidUserName() {}

    @Test void removeUserValid() {}

    @Test void removeUserinvalid() {}

    @Test void setCategoryValid() {}

    @Test void setCategoryInvalid() {}
    
    @Test void modify() {} // fill this in as reasonable

    @Test void cashAddValid() {}

    @Test void cashAddInvalidAmount() {}

    @Test void cashAddInvalidDenom() {}

    @Test void cashremoveValid() {}

    @Test void cashremoveInvalidAmount() {}

    @Test void cashremoveValidDenom() {}
}
